# Generated by Django 4.0.2 on 2022-02-14 17:13

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('notes', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300, validators=[django.core.validators.MinLengthValidator(1)])),
                ('ttcode', models.CharField(max_length=12, validators=[django.core.validators.MinLengthValidator(1)])),
                ('ranking', models.IntegerField()),
                ('imdb_rating', models.FloatField()),
                ('meta_score', models.IntegerField()),
                ('year', models.IntegerField()),
                ('plot', models.TextField()),
                ('poster_url', models.CharField(max_length=300)),
                ('actors', models.ManyToManyField(related_name='films_acted_in', to='top_films.Person')),
                ('directors', models.ManyToManyField(related_name='films_directed', to='top_films.Person')),
                ('genres', models.ManyToManyField(related_name='films', to='top_films.Genre')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='top_films.language')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='top_films.film')),
            ],
        ),
        migrations.AddConstraint(
            model_name='film',
            constraint=models.CheckConstraint(check=models.Q(('year__gt', 1876)), name='year_valid'),
        ),
        migrations.AddConstraint(
            model_name='film',
            constraint=models.CheckConstraint(check=models.Q(('imdb_rating__gte', 0), ('imdb_rating__lte', 10)), name='rating_valid'),
        ),
        migrations.AddConstraint(
            model_name='film',
            constraint=models.CheckConstraint(check=models.Q(('meta_score__gte', 0), ('meta_score__lte', 100)), name='meta_score_valid'),
        ),
    ]
